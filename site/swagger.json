{
  "openapi": "3.0.0",
  "x-stoplight": {
    "id": "8rmmut9xkw3te"
  },
  "info": {
    "title": "Hermes-Prime",
    "version": "1.0",
    "description": "Handles the majority of what **Project Hermes** is capable of. For example, it provides endpoints that manage the CRUD operations for _Users_ and _Friends_, as well as an endpoint for _Check Ins_.\n\nA _Check In_ is an event where a User is generating a message to send to their Friend and all that work is done by this API.",
    "contact": {
      "name": "Devin Leaman (4lch4)",
      "url": "https://4lch4.link",
      "email": "hey@4lch4.email"
    },
    "license": {
      "name": "GPLv3",
      "url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
    }
  },
  "servers": [
    {
      "url": "http://localhost:5050/api/v1",
      "description": "Local Testing"
    },
    {
      "url": "https://test.hermesapp.dev/api/v1",
      "description": "Test Environment"
    },
    {
      "url": "https://hermesapp.dev/api/v1",
      "description": "Production Environment"
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "summary": "Get Users",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Returns an array of User objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "No API token was provided."
          },
          "403": {
            "description": "Your API token doesn't have the necessary scope(s) to access this endpoint."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "getUsers",
        "description": "_This endpoint is an Admin only endpoint. You can only access it if your API token has an `admin` level scope._\n\nRetrieve a list/array of all the Users currently stored in the DB."
      },
      "post": {
        "summary": "Create User",
        "operationId": "createUser",
        "responses": {
          "200": {
            "description": "The body of the User that was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "No API token was provided."
          },
          "403": {
            "description": "Your API token doesn't have the necessary scope(s) to access this endpoint."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Create a new User and store it in the DB.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User_CREATE"
              }
            }
          },
          "description": "The object containing the Users properties."
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{userId}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "Id of an existing user."
        }
      ],
      "get": {
        "summary": "Get User",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "The User with the given `userId`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "examples": {
                  "Get User Alice Smith": {
                    "value": {
                      "id": 142,
                      "firstName": "Alice",
                      "lastName": "Smith",
                      "email": "alice.smith@gmail.com",
                      "dateOfBirth": "1997-10-31",
                      "emailVerified": true,
                      "signUpDate": "2019-08-24"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No API token was provided."
          },
          "403": {
            "description": "Your API token doesn't have the necessary scope(s) to access this endpoint."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "getUsers",
        "description": "Get an existing User with the given `userId`.",
        "parameters": []
      },
      "patch": {
        "summary": "Update User",
        "operationId": "updateUser",
        "responses": {
          "200": {
            "description": "The latest version of the User object after the given properties were updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "examples": {
                  "Updated User Rebecca Baker": {
                    "value": {
                      "id": 13,
                      "firstName": "Rebecca",
                      "lastName": "Baker",
                      "email": "rebecca@gmail.com",
                      "dateOfBirth": "1985-10-02",
                      "emailVerified": false,
                      "createDate": "2019-08-24"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "No API token was provided."
          },
          "403": {
            "description": "Your API token doesn't have the necessary scope(s) to access this endpoint."
          },
          "404": {
            "description": "User Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Update the information of an existing user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User_UPDATE"
              },
              "examples": {
                "Update First Name": {
                  "value": {
                    "firstName": "Rebecca"
                  }
                },
                "Update Email": {
                  "value": {
                    "email": "rebecca@gmail.com"
                  }
                },
                "Update Last Name & Date of Birth": {
                  "value": {
                    "lastName": "Baker",
                    "dateOfBirth": "1985-10-02"
                  }
                }
              }
            }
          },
          "description": "An object containing the properties you wish to update."
        },
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "summary": "Delete User",
        "operationId": "deleteUser",
        "responses": {
          "200": {
            "description": "The User object that was deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "No API token was provided."
          },
          "403": {
            "description": "Your API token doesn't have the necessary scope(s) to access this endpoint."
          },
          "404": {
            "description": "User Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Delete an existing User with the given `userId`.",
        "tags": [
          "Users"
        ]
      }
    },
    "/friends": {
      "get": {
        "summary": "Get Friends",
        "tags": [
          "Friends"
        ],
        "responses": {
          "200": {
            "description": "An array of Friend objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Friend"
                  }
                }
              }
            }
          },
          "401": {
            "description": "No API token was provided."
          },
          "403": {
            "description": "Your API token doesn't have the necessary scope(s) to access this endpoint."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "getFriends",
        "description": "_This endpoint is an Admin only endpoint. You can only access it if your API token has an `admin` level scope._\n\nRetrieve a list/array of all the Friends currently stored in the DB."
      },
      "post": {
        "summary": "Create Friend",
        "operationId": "createFriend",
        "responses": {
          "200": {
            "description": "The body of the Friend that was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Friend"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "No API token was provided."
          },
          "403": {
            "description": "Your API token doesn't have the necessary scope(s) to access this endpoint."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Create a new Friend and store it in the DB.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Friend_CREATE"
              }
            }
          },
          "description": "The body of the Friend to be created."
        },
        "tags": [
          "Friends"
        ]
      }
    },
    "/friends/{friendId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "friendId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get A Friend",
        "tags": [
          "Friends"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Friend"
                }
              }
            }
          },
          "401": {
            "description": "No API token was provided."
          },
          "403": {
            "description": "Your API token doesn't have the necessary scope(s) to access this endpoint."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "getFriend",
        "description": "Get a friend with the given `friendId`."
      },
      "patch": {
        "summary": "Update Friend",
        "operationId": "updateFriend",
        "responses": {
          "200": {
            "description": "Returns the latest version of the Friend object after the given properties were updated."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "No API token was provided."
          },
          "403": {
            "description": "Your API token doesn't have the necessary scope(s) to access this endpoint."
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Update a friend with the given `friendId`.",
        "tags": [
          "Friends"
        ]
      },
      "delete": {
        "summary": "Delete Friend",
        "operationId": "deleteFriend",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "No API token was provided."
          },
          "403": {
            "description": "Your API token doesn't have the necessary scope(s) to access this endpoint."
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Delete a Friend with the given `friendId`.",
        "tags": [
          "Friends"
        ]
      }
    },
    "/checkins": {
      "get": {
        "summary": "Get All Check Ins",
        "tags": [
          "CheckIns"
        ],
        "responses": {
          "200": {
            "description": "An array of CheckIn objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckIn"
                  }
                }
              }
            }
          },
          "401": {
            "description": "No API token was provided."
          },
          "403": {
            "description": "Your API token doesn't have the necessary scope(s) to access this endpoint."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "getCheckIns",
        "description": "_This endpoint is an Admin only endpoint. You can only access it if your API token has an `admin` level scope._\n\nRetrieve a list/array of all the Users currently stored in the DB."
      },
      "post": {
        "summary": "Create Check In",
        "operationId": "createCheckIn",
        "responses": {
          "200": {
            "description": "The created CheckIn object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckIn"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "No API token was provided."
          },
          "403": {
            "description": "Your API token doesn't have the necessary scope(s) to access this endpoint."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Initiates the Check In process and stores an object in the DB for record of the event.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckIn_CREATE"
              }
            }
          },
          "description": "An object containing the CheckIn properties."
        },
        "tags": [
          "CheckIns"
        ]
      }
    },
    "/checkins/{checkInId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "checkInId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Check In",
        "tags": [
          "CheckIns"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckIn"
                }
              }
            }
          },
          "401": {
            "description": "No API token was provided."
          },
          "403": {
            "description": "Your API token doesn't have the necessary scope(s) to access this endpoint."
          },
          "404": {
            "description": "CheckIn Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "getCheckIn",
        "description": "Get an existing Check In with the given `checkInId`."
      },
      "patch": {
        "summary": "Update Check In",
        "operationId": "updateCheckIn",
        "responses": {
          "200": {
            "description": "The latest version of the CheckIn object after the given properties were updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckIn"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "No API token was provided."
          },
          "403": {
            "description": "Your API token doesn't have the necessary scope(s) to access this endpoint."
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Update an existing Check In with the given `checkInId`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckIn_UPDATE"
              }
            }
          },
          "description": "An object with the new properties/values to update."
        },
        "tags": [
          "CheckIns"
        ]
      },
      "delete": {
        "summary": "Delete Check In",
        "operationId": "deleteCheckIn",
        "responses": {
          "200": {
            "description": "The Check In object that was deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckIn"
                }
              }
            }
          },
          "401": {
            "description": "No API token was provided."
          },
          "403": {
            "description": "Your API token doesn't have the necessary scope(s) to access this endpoint."
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Delete an existing Check In with the given `checkInId`.",
        "tags": [
          "CheckIns"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "CheckIn": {
        "title": "CheckIn",
        "x-stoplight": {
          "id": "w6nljbpo81ghw"
        },
        "type": "object",
        "description": "The model of a standard Check In object that's stored in the DB when a Check In is initiated.",
        "examples": [
          {
            "_id": "1234567890",
            "userId": "321231455",
            "friendId": "8931458135",
            "createdDate": "2023-01-01T09:03:21-0600",
            "promptAttempts": 1
          }
        ],
        "properties": {
          "_id": {
            "description": "Unique identifier for the given Check In as a Mongo ObjectID.",
            "type": [
              "string",
              "number"
            ]
          },
          "userId": {
            "type": [
              "string",
              "number"
            ],
            "description": "Unique identifier for the User who initiated the Check In process."
          },
          "friendId": {
            "type": [
              "string",
              "number"
            ],
            "description": "Unique identifier for the Friend who the User wants to check in on."
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when the Check In was completed. It'll default to the current date and time if no value was provided."
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "_id",
          "userId",
          "friendId",
          "createdDate",
          "lastModifiedDate"
        ]
      },
      "CheckIn_CREATE": {
        "title": "CheckIn_CREATE",
        "x-stoplight": {
          "id": "bocmiic4g6ltz"
        },
        "type": "object",
        "description": "The model of a standard Check In object that's stored in the DB when a Check In is initiated.",
        "examples": [
          {
            "_id": "1234567890",
            "userId": "321231455",
            "friendId": "8931458135",
            "createdDate": "2023-01-01T09:03:21-0600",
            "promptAttempts": 1
          }
        ],
        "properties": {
          "userId": {
            "type": [
              "string",
              "number"
            ],
            "description": "Unique identifier for the User who initiated the Check In process."
          },
          "friendId": {
            "type": [
              "string",
              "number"
            ],
            "description": "Unique identifier for the Friend who the User wants to check in on."
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when the Check In was completed. It'll default to the current date and time if no value was provided."
          }
        },
        "required": [
          "userId",
          "friendId"
        ]
      },
      "CheckIn_UPDATE": {
        "title": "CheckIn_UPDATE",
        "x-stoplight": {
          "id": "8hoosh7o8qr0b"
        },
        "type": "object",
        "description": "The model of a standard Check In object that's stored in the DB when a Check In is initiated.",
        "examples": [
          {
            "_id": "1234567890",
            "userId": "321231455",
            "friendId": "8931458135",
            "createdDate": "2023-01-01T09:03:21-0600",
            "promptAttempts": 1
          }
        ],
        "properties": {
          "userId": {
            "type": [
              "string",
              "number"
            ],
            "description": "Unique identifier for the User who initiated the Check In process."
          },
          "friendId": {
            "type": [
              "string",
              "number"
            ],
            "description": "Unique identifier for the Friend who the User wants to check in on."
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when the Check In was initiated. It'll default to the current date and time."
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when the Check In was completed. It'll default to the current date and time if no value was provided."
          }
        },
        "required": [
          "userId",
          "friendId"
        ]
      },
      "Friend": {
        "title": "Friend",
        "x-stoplight": {
          "id": "lv1cvw110hokc"
        },
        "type": "object",
        "description": "The model of a standard Friend that's stored in the Hermes DB.",
        "properties": {
          "_id": {
            "type": [
              "string",
              "number"
            ],
            "description": "Unique identifier for the given Friend as a Mongo ObjectID."
          },
          "contactId": {
            "type": "string",
            "description": "The unique identifier of the Friends contact information on thU users phone."
          },
          "messagePrompt": {
            "type": "string",
            "description": "What is sent to GPT3 to generate a message for this Friend. If the user doesn't provide one then a default is used."
          },
          "messageAttempts": {
            "type": "number",
            "description": "The amount of times **Hermes** had to generate a message for the User to approve before it was approved and sent to the receiving Friend. If no value is provided then the default value of `3` is used."
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when this Friend was created. Will default to the current date and time if no value is provided."
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when this Friend object was last modified. Will default to the current date and time if no value is provided."
          },
          "lastContactDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when the associated User last contacted this Friend. Will not be set if no value is provided."
          }
        },
        "required": [
          "_id",
          "contactId",
          "messagePrompt",
          "messageAttempts",
          "createdDate",
          "lastModifiedDate"
        ]
      },
      "Friend_CREATE": {
        "title": "Friend_CREATE",
        "x-stoplight": {
          "id": "zbqtfg830nh7r"
        },
        "type": "object",
        "description": "The model of the object to send to the API when creating a new Friend to store in the Hermes DB.",
        "examples": [
          {
            "contactId": "1234567890"
          },
          {
            "contactId": "1234567890",
            "messagePrompt": "Please create a message from me, 4lch4, to my friend ${FRIEND_NAME} asking them what they've been up to since we last spoke.",
            "lastContactDate": "2022-12-30T14:15:02-0600"
          },
          {
            "contactId": "1234567890",
            "lastContactDate": "2022-12-30T14:15:02-0600"
          },
          {
            "contactId": "1234567890",
            "messagePrompt": "Please create a message from me, 4lch4, to my friend ${FRIEND_NAME} asking them what they've been up to since we last spoke."
          }
        ],
        "properties": {
          "contactId": {
            "type": "string",
            "description": "The unique identifier of the Friends contact information on thU users phone."
          },
          "messagePrompt": {
            "type": "string",
            "description": "What is sent to GPT3 to generate a message for this Friend. If the user doesn't provide one then a default is used."
          },
          "messageAttempts": {
            "type": "number",
            "description": "The amount of times **Hermes** had to generate a message for the User to approve before it was approved and sent to the receiving Friend. If no value is provided then the default value of `3` is used."
          },
          "lastContactDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when the associated User contacted this Friend. Will not be set if no value is provided."
          }
        },
        "required": [
          "contactId"
        ]
      },
      "User": {
        "title": "User",
        "x-stoplight": {
          "id": "e3zglb3cf9c84"
        },
        "type": "object",
        "description": "The model of a standard User that's stored in the Hermes DB.",
        "examples": [
          {
            "_id": "63ab4a738353e19cd730b527",
            "username": "4lch4",
            "createdDate": "2023-01-02T14:15:03-06:00",
            "lastModifedDate": "2023-01-02T14:15:03-06:00"
          }
        ],
        "properties": {
          "_id": {
            "type": [
              "string",
              "number"
            ],
            "description": "Unique identifier for the given User as a Mongo ObjectID."
          },
          "username": {
            "type": "string",
            "description": "The username/display name of the User."
          },
          "createdDate": {
            "type": "string",
            "description": "The date-time when the User was created. Will default to now if now value is provided.",
            "format": "date-time"
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when the User was last modified/updated. Defaults to the date & time the object was created."
          }
        },
        "required": [
          "_id",
          "username",
          "createdDate",
          "lastModifiedDate"
        ]
      },
      "User_CREATE": {
        "title": "User_CREATE",
        "x-stoplight": {
          "id": "l0lxy702k8wcd"
        },
        "type": "object",
        "description": "The model of the object to send to the API when creating a new User to store in the Hermes DB.",
        "examples": [
          {
            "username": "4lch4",
            "createdDate": "2023-01-08T16:20:18-0600",
            "lastModifiedDate": "2023-01-08T16:20:18-0600"
          },
          {
            "username": "4lch4"
          }
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "The username/display name of the User."
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when the User was created. Will default to now if now value is provided."
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when the User was last modified/updated. Defaults to the date & time the object was created."
          }
        },
        "required": [
          "username"
        ]
      },
      "User_UPDATE": {
        "title": "User",
        "x-stoplight": {
          "id": "au1w15fac7bog"
        },
        "type": "object",
        "description": "The model of a standard User that's stored in the Hermes DB.",
        "examples": [
          {
            "_id": "63ab4a738353e19cd730b527",
            "username": "4lch4",
            "createdDate": "2023-01-02T14:15:03-06:00",
            "lastModifedDate": "2023-01-02T14:15:03-06:00"
          }
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "The username/display name of the User."
          },
          "lastModifiedDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when the User was last modified/updated. Defaults to the date & time the object was created."
          }
        },
        "required": [
          "username",
          "lastModifiedDate"
        ]
      }
    },
    "securitySchemes": {
      "Query API Key": {
        "name": "apiKey",
        "type": "apiKey",
        "in": "query"
      }
    }
  },
  "security": [
    {
      "Query API Key": []
    }
  ],
  "tags": [
    {
      "name": "CheckIns",
      "description": "Operations related to check ins CRUD."
    },
    {
      "name": "Friends",
      "description": "Operations related to Friends CRUD."
    },
    {
      "name": "Users",
      "description": "Operations related to Users CRUD."
    }
  ]
}