openapi: 3.0.0
info:
  title: Hermes-Prime-3.0
  version: "1.0"
  description: |-
    Handles the majority of what **Project Hermes** is capable of. For example, it provides endpoints that manage the CRUD operations for _Users_ and _Friends_, as well as an endpoint for _Check Ins_.

    A _Check In_ is an event where a User is generating a message to send to their Friend and all that work is done by this API.
  contact:
    name: Devin Leaman (4lch4)
    url: "https://4lch4.link"
    email: hey@4lch4.email
  license:
    name: GPLv3
    url: "https://www.gnu.org/licenses/gpl-3.0.en.html"

servers:
  - url: "http://localhost:5050/api/v1"
    description: Local Testing
  - url: "https://test.hermesapp.dev/api/v1"
    description: Test Environment
  - url: "https://hermesapp.dev/api/v1"
    description: Production Environment

paths:
  /checkins:
    get:
      summary: Get All Check Ins
      operationId: getCheckIns
      description: |-
        _This endpoint is an Admin only endpoint. You can only access it if your API token has an `admin` level scope._

        Retrieve a list/array of all the Users currently stored in the DB.
      tags: [CheckIns]
      responses:
        200:
          description: An array of CheckIn objects.
          content:
            application/json:
              schema:
                description: An array of CheckIn objects.
                type: array
                items:
                  $ref: "#/components/schemas/CheckIn"
              examples:
                Get all CheckIns:
                  value:
                    - _id: 1234567890
                      userId: 1234567890
                      friendId: 1234567890
                      messageAttempts: 2
                      createdDate: "2022-12-29T09:05:02-06:00"
                      lastModifiedDate: "2022-12-29T09:05:02-06:00"

                    - _id: 1234567891
                      userId: 1234567891
                      friendId: 1234567891
                      messageAttempts: 2
                      createdDate: "2022-12-29T09:05:02-06:00"
                      lastModifiedDate: "2022-12-29T09:05:02-06:00"

        401:
          description: No API token was provided.
        403:
          description: Your API token doesn't have the necessary scope(s) to access this endpoint.
        500:
          description: Internal Server Error

    post:
      summary: Create Check In
      operationId: createCheckIn
      description: Initiates the Check In process and stores an object in the DB for record of the event.
      tags: [CheckIns]
      requestBody:
        description: An object containing the CheckIn properties.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckIn_CREATE"
      responses:
        200:
          description: The created CheckIn object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckIn"
        400:
          description: Bad Request
        401:
          description: No API token was provided.
        403:
          description: Your API token doesn't have the necessary scope(s) to access this endpoint.
        500:
          description: Internal Server Error

  "/checkins/{checkInId}":
    parameters:
      - name: checkInId
        in: path
        required: true
        schema:
          type: string

    get:
      summary: Get Check In
      operationId: getCheckIn
      description: Get an existing Check In with the given `checkInId`.
      tags: [CheckIns]
      responses:
        200:
          description: The CheckIn object with the given `checkInId`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckIn"
              examples:
                Get a CheckIn:
                  description: Retrieving a single CheckIn object.
                  value:
                    _id: 1234567890
                    userId: 1234567890
                    friendId: 1234567890
                    messageAttempts: 2
                    createdDate: "2022-12-29T09:05:02-06:00"
                    lastModifiedDate: "2022-12-29T09:05:02-06:00"
        401:
          description: No API token was provided.
        403:
          description: Your API token doesn't have the necessary scope(s) to access this endpoint.
        404:
          description: CheckIn Not Found
        500:
          description: Internal Server Error

    patch:
      summary: Update Check In
      operationId: updateCheckIn
      description: Update an existing Check In with the given `checkInId`.
      tags: [CheckIns]
      requestBody:
        description: An object with the properties/values to update.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckIn_UPDATE"
      responses:
        200:
          description: The latest version of the CheckIn object after the given properties were updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckIn"
        400:
          description: Bad Request
        401:
          description: No API token was provided.
        403:
          description: Your API token doesn't have the necessary scope(s) to access this endpoint.
        404:
          description: Not Found
        500:
          description: Internal Server Error

    delete:
      summary: Delete Check In
      operationId: deleteCheckIn
      description: Delete an existing Check In with the given `checkInId`.
      tags: [CheckIns]
      responses:
        200:
          description: The Check In object that was deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckIn"
        401:
          description: No API token was provided.
        403:
          description: Your API token doesn't have the necessary scope(s) to access this endpoint.
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /users:
    get:
      summary: Get Users
      operationId: getUsers
      description: |-
        _This endpoint is an Admin only endpoint. You can only access it if your API token has an `admin` level scope._

        Retrieve a list/array of all the Users currently stored in the DB.
      tags: [Users]
      responses:
        200:
          description: Returns an array of User objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        401:
          description: No API token was provided.
        403:
          description: Your API token doesn't have the necessary scope(s) to access this endpoint.
        500:
          description: Internal Server Error

    post:
      summary: Create User
      operationId: createUser
      description: Create a new User and store it in the DB.
      tags: [Users]
      requestBody:
        description: The object containing the Users properties.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User_CREATE"
      responses:
        200:
          description: The body of the User that was created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad Request
        401:
          description: No API token was provided.
        403:
          description: Your API token doesn't have the necessary scope(s) to access this endpoint.
        500:
          description: Internal Server Error

  "/users/{userId}":
    parameters:
      - name: userId
        in: path
        required: true
        description: Id of an existing user.
        schema:
          type: integer

    get:
      summary: Get User
      operationId: getUser
      description: Get an existing User with the given `userId`.
      tags: [Users]
      responses:
        200:
          description: The User with the given `userId`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                Get User:
                  value:
                    _id: "1234567890"
                    username: "4lch4"
                    createdDate: "2022-12-29T09:05:02-06:00"
                    lastModifiedDate: "2022-12-29T09:05:02-06:00"
        401:
          description: No API token was provided.
        403:
          description: Your API token doesn't have the necessary scope(s) to access this endpoint.
        500:
          description: Internal Server Error

    patch:
      summary: Update User
      operationId: updateUser
      description: Update the information of an existing user.
      tags: [Users]
      requestBody:
        description: An object containing the properties you wish to update.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User_UPDATE"
      responses:
        200:
          description: The latest version of the User object after the given properties were updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad Request
        401:
          description: No API token was provided.
        403:
          description: Your API token doesn't have the necessary scope(s) to access this endpoint.
        404:
          description: User Not Found
        500:
          description: Internal Server Error

    delete:
      summary: Delete User
      operationId: deleteUser
      description: Delete an existing User with the given `userId`.
      tags: [Users]
      responses:
        200:
          description: The User object that was deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: No API token was provided.
        403:
          description: Your API token doesn't have the necessary scope(s) to access this endpoint.
        404:
          description: User Not Found
        500:
          description: Internal Server Error

  /friends:
    get:
      summary: Get Friends
      operationId: getFriends
      description: |-
        _This endpoint is an Admin only endpoint. You can only access it if your API token has an `admin` level scope._

        Retrieve a list/array of all the Friends currently stored in the DB.
      tags: [Friends]
      responses:
        200:
          description: An array of Friend objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Friend"
        401:
          description: No API token was provided.
        403:
          description: Your API token doesn't have the necessary scope(s) to access this endpoint.
        500:
          description: Internal Server Error

    post:
      summary: Create Friend
      operationId: createFriend
      description: Create a new Friend and store it in the DB.
      tags: [Friends]
      requestBody:
        description: The body of the Friend to be created.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Friend_CREATE"
      responses:
        200:
          description: The body of the Friend that was created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Friend"
        400:
          description: Bad Request
        401:
          description: No API token was provided.
        403:
          description: Your API token doesn't have the necessary scope(s) to access this endpoint.
        500:
          description: Internal Server Error

  "/friends/{friendId}":
    parameters:
      - name: friendId
        in: path
        required: true
        schema:
          type: string

    get:
      summary: Get A Friend
      operationId: getFriend
      description: Get a friend with the given `friendId`.
      tags: [Friends]
      responses:
        200:
          description: The Friend object with the given `friendId`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Friend"
        401:
          description: No API token was provided.
        403:
          description: Your API token doesn't have the necessary scope(s) to access this endpoint.
        500:
          description: Internal Server Error

    patch:
      summary: Update Friend
      operationId: updateFriend
      description: Update a friend with the given `friendId`.
      tags: [Friends]
      requestBody:
        description: The body of the Friend to be created.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Friend_UPDATE"
      responses:
        200:
          description: Returns the latest version of the Friend object after the given properties were updated.
        400:
          description: Bad Request
        401:
          description: No API token was provided.
        403:
          description: Your API token doesn't have the necessary scope(s) to access this endpoint.
        404:
          description: Not Found
        500:
          description: Internal Server Error

    delete:
      summary: Delete Friend
      operationId: deleteFriend
      description: Delete a Friend with the given `friendId`.
      tags: [Friends]
      responses:
        200:
          description: OK
        401:
          description: No API token was provided.
        403:
          description: Your API token doesn't have the necessary scope(s) to access this endpoint.
        404:
          description: Not Found
        500:
          description: Internal Server Error

components:
  schemas:
    #region CheckIn Schemas
    CheckIn:
      title: CheckIn
      type: object
      description: The model of a standard Check In object that's stored in the DB when a Check In is initiated.
      required: [_id, userId, friendId, createdDate, lastModifiedDate]
      properties:
        _id:
          type: string
          description: Unique identifier for the given Check In as a Mongo ObjectID.
        userId:
          type: string
          description: Unique identifier for the User who initiated the Check In process.
        friendId:
          type: string
          description: Unique identifier for the Friend who the User wants to check in on.
        messageAttempts:
          type: number
          description: The amount of times Hermes had to attempt to generate a message for this CheckIn.
        createdDate:
          $ref: "#/components/schemas/CreatedDate"
        lastModifiedDate:
          $ref: "#/components/schemas/LastModifiedDate"

    CheckIn_CREATE:
      title: CheckIn_CREATE
      type: object
      description: The model of a standard Check In object that's stored in the DB when a Check In is initiated.
      required: [userId, friendId]
      properties:
        userId:
          type: string
          description: Unique identifier for the User who initiated the Check In process.
        friendId:
          type: string
          description: Unique identifier for the Friend who the User wants to check in on.
        createdDate:
          $ref: "#/components/schemas/CreatedDate"
        lastModifiedDate:
          $ref: "#/components/schemas/LastModifiedDate"

    CheckIn_UPDATE:
      title: CheckIn_UPDATE
      type: object
      description: The model of a standard Check In object that's stored in the DB when a Check In is initiated.
      properties:
        userId:
          type: string
          description: Unique identifier for the User who initiated the Check In process.
        friendId:
          type: string
          description: Unique identifier for the Friend who the User wants to check in on.
        lastModifiedDate:
          $ref: "#/components/schemas/LastModifiedDate"
    #endregion CheckIn Schemas

    #region Friend Schemas
    Friend:
      title: Friend
      type: object
      description: The model of a standard Friend that's stored in the Hermes DB.
      required:
        [
          _id,
          contactId,
          messagePrompt,
          messageAttempts,
          createdDate,
          lastModifiedDate,
        ]
      properties:
        _id:
          type: string
          description: Unique identifier for the given Friend as a Mongo ObjectID.
        contactId:
          type: string
          description: The unique identifier of the Friends contact information on thU users phone.
        messagePrompt:
          type: string
          description: What is sent to GPT3 to generate a message for this Friend. If the user doesn't provide one then a default is used.
        messageAttempts:
          type: number
          description: The amount of times **Hermes** had to generate a message for the User to approve before it was approved and sent to the receiving Friend. If no value is provided then the default value of `3` is used.
        createdDate:
          $ref: "#/components/schemas/CreatedDate"
        lastModifiedDate:
          $ref: "#/components/schemas/LastModifiedDate"
        lastContactedDate:
          $ref: "#/components/schemas/LastContactedDate"

    Friend_CREATE:
      title: Friend_CREATE
      type: object
      description: The model of the object to send to the API when creating a new Friend to store in the Hermes DB.
      required: [contactId]
      properties:
        contactId:
          type: string
          description: The unique identifier of the Friends contact information on thU users phone.
        messagePrompt:
          type: string
          description: What is sent to GPT3 to generate a message for this Friend. If the user doesn't provide one then a default is used.
        messageAttempts:
          type: number
          description: The amount of times **Hermes** had to generate a message for the User to approve before it was approved and sent to the receiving Friend. If no value is provided then the default value of `3` is used.
        lastContactedDate:
          $ref: "#/components/schemas/LastContactedDate"

    Friend_UPDATE:
      title: Friend_UPDATE
      type: object
      description: The model of the object to send to the API when updating an existing Friend stored in the Hermes DB.
      properties:
        contactId:
          type: string
          description: The unique identifier of the Friends contact information on thU users phone.
        messagePrompt:
          type: string
          description: What is sent to GPT3 to generate a message for this Friend. If the user doesn't provide one then a default is used.
        messageAttempts:
          type: number
          description: The amount of times **Hermes** had to generate a message for the User to approve before it was approved and sent to the receiving Friend. If no value is provided then the default value of `3` is used.
        lastContactedDate:
          $ref: "#/components/schemas/LastContactedDate"
    #endregion Friend Schemas

    #region User Schemas
    User:
      title: User
      type: object
      description: The model of a standard User that's stored in the Hermes DB.
      required: [_id, username, createdDate, lastModifiedDate]
      properties:
        _id:
          type: string
          description: Unique identifier for the given User as a Mongo ObjectID.
        username:
          type: string
          description: The username/display name of the User.
        createdDate:
          $ref: "#/components/schemas/CreatedDate"
        lastModifiedDate:
          $ref: "#/components/schemas/LastModifiedDate"

    User_CREATE:
      title: User_CREATE
      type: object
      description: The model of the object to send to the API when creating a new User to store in the Hermes DB.
      required: [username]
      properties:
        username:
          type: string
          description: The username/display name of the User.
        createdDate:
          $ref: "#/components/schemas/CreatedDate"
        lastModifiedDate:
          $ref: "#/components/schemas/LastModifiedDate"

    User_UPDATE:
      title: User_UPDATE
      type: object
      description: The model of a standard User that's stored in the Hermes DB.
      properties:
        username:
          type: string
          description: The username/display name of the User.
        lastModifiedDate:
          $ref: "#/components/schemas/LastModifiedDate"
    #endregion User Schemas

    CreatedDate:
      title: CreatedDate
      type: string
      description: The date-time when the object was created. Defaults to the current date & time.
      format: date-time
      default: now
      example: "2023-01-11T22:09:01+00:00"

    LastModifiedDate:
      title: LastModifiedDate
      type: string
      format: date-time
      description: The date-time when the object was last modified/updated. Defaults to the date & time the object was created.
      default: Value of createdDate.
      example: "2023-01-11T22:09:01+00:00"

    LastContactedDate:
      title: LastContactedDate
      type: string
      format: date-time
      description: The date-time when the individual was last contacted. Does not have any default, will be null if no value is provided.
      example: "2023-01-11T22:09:01+00:00"

  securitySchemes:
    QueryAPIKey:
      name: apiKey
      type: apiKey
      in: query

security:
  - QueryAPIKey: []

tags:
  - name: CheckIns
    description: Operations related to check ins CRUD.

  - name: Friends
    description: Operations related to Friends CRUD.

  - name: Users
    description: Operations related to Users CRUD.
